<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 * 
 *  					Copyright (C) madx
 * 						http://madxartwork.net
 *
 * Do not edit this file.
 * To add custom PHP functions to the theme, create a child theme functions.php file.
 * 
 ***************************************************************************/

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'tf_enqueue_scripts', 10 );
add_action( 'wp_head', 'tf_action_header' );
add_action( 'wp_footer','tf_render_footer_text' );




/**
* Render header settings
* 
* @since 1.0.0
* @access public
*/
function tf_action_header() {
       $header_text = TF_Settings::get('header_text');
       $favicon = TF_Settings::get('favicon');
       if($favicon){
           echo '<link rel="Shortcut Icon" href="'.$favicon.'" type="image/x-icon" />';
       }
       if($header_text){
           echo "\n\n" . $header_text;
       }
       //Add viewport tag for responsive layouts
       $responsive = TF_Settings::get('disable_responsive');
       if(!$responsive || !checked($responsive,'on',false)){
            echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
       }
       else{
           echo "\n".'<meta name="viewport" content="width=1200">'."\n";
       }
}

/**
* Render footer text
* 
* @since 1.0.0
* @access public
*/
function tf_render_footer_text() {
       $footer_text = TF_Settings::get('footer_text');
       if($footer_text){
           echo "\n\n" . $footer_text;
       }
}



/////// Filters ////////


/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function tf_enqueue_scripts(){

	// Get theme version for theme scripts and styles
	$theme_version = wp_get_theme('madxflow')->display('Version');

	///////////////////
	//Enqueue styles
	///////////////////
	// Flow style.css
	wp_enqueue_style( 'flow-style', get_template_directory_uri() . '/style.css', array(), $theme_version);

	$responsive = TF_Settings::get( 'disable_responsive' );
	if( ! $responsive || ! checked( $responsive, 'on', false ) ) {
		wp_enqueue_style( 'madx-media-queries', get_template_directory_uri() . '/media-queries.css', array(), $theme_version);
	}

	if( is_child_theme() ) {
		wp_enqueue_style( 'style', get_stylesheet_uri(), array(), $theme_version );
	}

	///////////////////
	//Enqueue scripts
	///////////////////
	
	// WordPress comment-reply script 
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

	
/* Custom Functions
/***************************************************************************/	

/**
 * Register Main Sidebar
 * @since 1.0.0
 */
function tf_register_sidebar() {

	register_sidebar( array(
		'name' => __( 'Main Sidebar', 'tf' ),
		'id' => 'main-sidebar',
		'before_widget' => '<aside id="%1$s" class="tf_widget %2$s">',
		'after_widget' => '</aside>',
		'before_title' => '<h4 class="tf_widget_title">',
		'after_title' => '</h4>',
	) );
}

add_action( 'widgets_init', 'tf_register_sidebar' );

/**
 * WordPress Featured Image
 * @since 1.0.0
 */
add_theme_support( 'post-thumbnails' );

/**
 * Custom Theme Comment
 * @param object $comment Current comment.
 * @param array $args Parameters for comment reply link.
 * @param int $depth Maximum comment nesting depth.
 */
if ( ! function_exists( 'tf_theme_comment' ) ) {
	function tf_theme_comment($comment, $args, $depth) {
	   $GLOBALS['comment'] = $comment; ?>

		<li  id="comment-<?php comment_ID() ?>" <?php comment_class(); ?>>
			<p class="comment-author">
				<?php echo get_avatar( $comment, $args['avatar_size'] ); ?>
				<strong itemprop="creator"><?php echo get_comment_author_link(); ?></strong>
				<br />
				<small itemprop="commentTime" class="comment-time">
					<span class="comment-time-date">
					<?php comment_date( apply_filters('tf_comment_date', '') ); ?>
					</span> @
					<?php comment_time( apply_filters('comment-time', '') ); ?>
					<?php edit_comment_link( __('Edit', 'madx-flow'),' [',']'); ?>
				</small>
			</p>
			<div itemprop="commentText" class="comment-content">
				<?php if ($comment->comment_approved == '0') : ?>
					<p><em><?php _e('Your comment is awaiting moderation.', 'madx-flow') ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<p class="reply">
				<?php comment_reply_link(array_merge( $args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'madx-flow' ), 'max_depth' => $args['max_depth']))) ?>
			</p>
		<?php
	}
}

/**
 * Check if the site is using an HTTPS scheme and returns the proper url.
 * 
 * @param String $url requested url
 * @return String
 * @since 1.0.0
 */
function tf_https_esc($url = ''){
	if( is_ssl() ){
		$parsed_url = parse_url($url);
		$url = 'https://' . $parsed_url['host'] . $parsed_url['path'];
	}
	return $url;
}

/**
 * Generates microdata information for the html tag.
 * @return string
 * @since 1.0.0
 */
if ( ! function_exists( 'tf_get_html_schema' ) ) {
	function tf_get_html_schema() {
		$schema = 'http://schema.org/';
		if( is_author() ) {
			$type = 'ProfilePage';
		} elseif( is_search() ) {
			$type = 'SearchResultsPage';
		} else {
			$type = 'WebPage';
		}
		return 'itemscope="itemscope" itemtype="' . $schema . $type . '"';
	}
}

/**
 * Builds the markup for the entry author with microdata information.
 * @return string
 * @since 1.7.4
 */
if ( ! function_exists( 'tf_get_author_link' ) ) {
	function tf_get_author_link() {
		$output = '<span class="author vcard" itemprop="author" itemscope itemtype="http://schema.org/Person"><a class="url fn n" href="' . esc_url( get_author_posts_url( get_the_author_meta( 'ID' ) ) ) . '" rel="author" itemprop="name">' . get_the_author() . '</a></span>';
		return $output;
	}
}

/**
 * Echoes page navigation
 * @uses madx_get_pagenav
 * @since 1.0.0
 */
function tf_pagenav($before = '', $after = '', $query = false) {
	echo tf_get_pagenav($before, $after, $query);
}
/**
 * Returns page navigation
 * @param string Markup to show before pagination links
 * @param string Markup to show after pagination links
 * @param object WordPress query object to use
 * @return string
 * @since  1.0.0
 */
function tf_get_pagenav($before = '', $after = '', $query = false) {
	global $wpdb, $wp_query;
	
	if( false == $query ){
		$query = $wp_query;
	}
	$request = $query->request;
	$posts_per_page = intval(get_query_var('posts_per_page'));
	$paged = intval(get_query_var('paged'));
	$numposts = $query->found_posts;
	$max_page = $query->max_num_pages;

	if(empty($paged) || $paged == 0) {
		$paged = 1;
	}
	$pages_to_show = apply_filters('madx_filter_pages_to_show', 5);
	$pages_to_show_minus_1 = $pages_to_show-1;
	$half_page_start = floor($pages_to_show_minus_1/2);
	$half_page_end = ceil($pages_to_show_minus_1/2);
	$start_page = $paged - $half_page_start;
	if($start_page <= 0) {
		$start_page = 1;
	}
	$end_page = $paged + $half_page_end;
	if(($end_page - $start_page) != $pages_to_show_minus_1) {
		$end_page = $start_page + $pages_to_show_minus_1;
	}
	if($end_page > $max_page) {
		$start_page = $max_page - $pages_to_show_minus_1;
		$end_page = $max_page;
	}
	if($start_page <= 0) {
		$start_page = 1;
	}
	$out = '';
	if ($max_page > 1) {
		$out .=  $before.'<div class="tf_pagination clearfix">';
		if ($start_page >= 2 && $pages_to_show < $max_page) {
			$first_page_text = "&laquo;";
			$out .=  '<a href="'.get_pagenum_link().'" title="'.$first_page_text.'" class="number">'.$first_page_text.'</a>';
		}
		if($pages_to_show < $max_page)
			$out .= get_previous_posts_link('&lt;');
		for($i = $start_page; $i  <= $end_page; $i++) {
			if($i == $paged) {
				$out .=  ' <span class="number current">'.$i.'</span> ';
			} else {
				$out .=  ' <a href="'.get_pagenum_link($i).'" class="number">'.$i.'</a> ';
			}
		}
		if($pages_to_show < $max_page)
			$out .= get_next_posts_link('&gt;');
		if ($end_page < $max_page) {
			$last_page_text = "&raquo;";
			$out .=  '<a href="'.get_pagenum_link($max_page).'" title="'.$last_page_text.'" class="number">'.$last_page_text.'</a>';
		}
		$out .=  '</div>'.$after;
	}
	return $out;
}